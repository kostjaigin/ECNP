{"ast":null,"code":"var _jsxFileName = \"/home/lj/Git/ECNP/ECNP/src/ECNP.js\";\nimport React, { Component } from \"react\";\nexport default class ECNP extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setArrayDrones = array => {\n      for (let drone of this.state.droneArray) {\n        array[drone.x][drone.y].value = \"D\";\n      }\n\n      this.setState({\n        array: array\n      });\n    };\n\n    let _array = [];\n\n    for (var i = 0; i < props.arraySize; i++) {\n      _array[i] = [];\n\n      for (var j = 0; j < props.arraySize; j++) {\n        _array[i][j] = {\n          value: \"_\",\n          x: i,\n          y: j\n        };\n      }\n    }\n\n    this.state = {\n      alphabet: \"abcdefghijklmnopqrstuvwxyz\",\n      alphabetCounter: 1,\n      array: _array,\n      droneArray: [{\n        x: 0,\n        y: 0,\n        jobs: [{\n          x: 0,\n          y: 2,\n          cost: 20\n        }]\n      }, {\n        x: 0,\n        y: props.arraySize - 1,\n        jobs: []\n      }, {\n        x: props.arraySize - 1,\n        y: 0,\n        jobs: []\n      }, {\n        x: props.arraySize - 1,\n        y: props.arraySize - 1,\n        jobs: []\n      }],\n      jobArray: [{\n        name: 'a',\n        x: 5,\n        y: 1,\n        deadLine: 16\n      }],\n      time: 0\n    };\n    this.randomiseResources = this.randomiseResources.bind(this);\n    this.setArrayDrones = this.setArrayDrones.bind(this);\n    this.getBids = this.getBids.bind(this);\n    this.getBidshelper = this.getBidsHelper.bind(this);\n    this.setArrayJobs = this.setArrayJobs.bind(this);\n  }\n\n  componentDidMount() {\n    this.setArrayDrones(this.state.array);\n    console.log(this.state.droneArray);\n  }\n\n  setArrayJobs() {}\n\n  randomiseResources() {\n    let array = this.state.array;\n    array.map(row => {\n      return row.map(element => {\n        let rando = Math.random();\n        let threshold = this.props.resourceSpawnThreshold;\n        if (rando < threshold) element.value = \"a\";else if (rando < threshold * 2) element.value = \"b\";else if (rando < threshold * 3) element.value = \"c\";else element.value = \"_\";\n        return element;\n      });\n    });\n    this.setArray(array);\n  }\n\n  askDrone(resourceString, droneNr) {\n    let array = this.state.array;\n\n    let checkResource = string => string === resourceString;\n\n    let checkCost = (x1, y1, x2, y2) => Math.abs(x1 - x2) + Math.abs(y1 - y2);\n\n    let drone = this.state.droneArray[droneNr];\n    array.map(row => {\n      row.map(element => {\n        if (checkResource(element.value)) {\n          let cost = drone.currentX && drone.currentY ? checkCost(drone.currentX, drone.currentY, element.x, element.y) : checkCost(drone.x, drone.y, element.x, element.y);\n\n          if (drone[resourceString] !== undefined && cost > drone[resourceString]) {\n            console.log('do');\n          } //do nothing ^\n          else {\n              console.log(cost);\n              drone[resourceString] = cost;\n              drone.couldBeX = element.x;\n              drone.couldBeY = element.y;\n            }\n        }\n      });\n    });\n  }\n\n  getBidsHelper(jobString, droneNr, x, y) {\n    console.log(jobString);\n    let array = this.state.array;\n\n    let checkJob = string => string === jobString;\n\n    let checkCost = (x1, y1, x2, y2) => Math.abs(x1 - x2) + Math.abs(y1 - y2);\n\n    let drone = this.state.droneArray[droneNr];\n    array.map(row => {\n      row.map(element => {\n        if (checkJob(element.name)) {\n          let cost = checkCost(x, y, element.x, element.y);\n          console.log(element.name);\n          drone.jobs.map(e => {\n            cost += e.cost;\n          });\n          drone.jobs.push({\n            x: element.x,\n            y: element.y,\n            name: element.name,\n            cost: cost\n          });\n        }\n      });\n    });\n    let droneArray = this.state.droneArray;\n    droneArray[droneNr] = drone;\n    console.log(droneArray);\n    console.log(droneArray[droneNr]);\n    this.setState({\n      droneArray: droneArray\n    });\n    console.log(drone);\n  }\n\n  getBids(droneNr) {\n    console.log(this.state.jobArray);\n\n    for (let job of this.state.jobArray) {\n      this.getBidsHelper(job.name, droneNr, job.x, job.y);\n    }\n  }\n\n  addJob(x, y) {\n    let arrayJobs = this.state.jobArray;\n    arrayJobs.push({\n      name: this.state.alphabet[this.state.alphabetCounter],\n      x: x,\n      y: y\n    });\n    this.setState({\n      alphabetCounter: this.state.alphabetCounter + 1,\n      jobArray: arrayJobs\n    });\n    let array = this.state.array;\n\n    for (let job of arrayJobs) {\n      array[job.x][job.y].value = job.name;\n    }\n\n    this.setState({\n      array: array\n    });\n  } // ECNP(ressource){\n  //     let \n  // }\n\n\n  render() {\n    const array = this.state.array;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.randomiseResources,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Random Resources\"), React.createElement(\"button\", {\n      onClick: () => this.askDrone('a', 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Ask Drone 1\"), React.createElement(\"button\", {\n      onClick: () => this.getBids(1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Ask Drone 1\"), array.map(row => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, row.map(element => React.createElement(\"span\", {\n      onClick: () => this.addJob(element.x, element.y),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"| \", element.value)))));\n  }\n\n}","map":{"version":3,"sources":["/home/lj/Git/ECNP/ECNP/src/ECNP.js"],"names":["React","Component","ECNP","constructor","props","setArrayDrones","array","drone","state","droneArray","x","y","value","setState","i","arraySize","j","alphabet","alphabetCounter","jobs","cost","jobArray","name","deadLine","time","randomiseResources","bind","getBids","getBidshelper","getBidsHelper","setArrayJobs","componentDidMount","console","log","map","row","element","rando","Math","random","threshold","resourceSpawnThreshold","setArray","askDrone","resourceString","droneNr","checkResource","string","checkCost","x1","y1","x2","y2","abs","currentX","currentY","undefined","couldBeX","couldBeY","jobString","checkJob","e","push","job","addJob","arrayJobs","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class ECNP extends Component{\n    constructor(props) {\n        super(props)\n        let array = []\n        for (var i = 0; i < props.arraySize; i++) {\n            array[i] = []\n            for (var j = 0; j < props.arraySize; j++) {\n                array[i][j] = {value:\"_\",\n                                x:i,\n                                y:j\n                                }\n            }\n        }\n        this.state = {\n            alphabet: \"abcdefghijklmnopqrstuvwxyz\",\n            alphabetCounter: 1,\n            array: array,\n            droneArray: [{x:0,y:0,jobs:[{x:0,y:2,cost:20}]},{x:0,y:props.arraySize-1,jobs:[]},{x:props.arraySize-1,y:0,jobs:[]},{x:props.arraySize-1,y:props.arraySize-1,jobs:[]},],\n            jobArray:[{name:'a', x:5, y: 1, deadLine:16}],\n            time:0\n        }\n        this.randomiseResources = this.randomiseResources.bind(this)\n        \n        this.setArrayDrones = this.setArrayDrones.bind(this)\n        this.getBids = this.getBids.bind(this)\n        this.getBidshelper = this.getBidsHelper.bind(this)\n        this.setArrayJobs = this.setArrayJobs.bind(this)\n    }\n    componentDidMount(){\n        this.setArrayDrones(this.state.array)\n        console.log(this.state.droneArray)\n    }\n    setArrayDrones = array =>{\n        for (let drone of this.state.droneArray){\n            array[drone.x][drone.y].value = \"D\"\n        }\n        this.setState({\n            array:array\n        })\n    }\n    setArrayJobs(){\n        \n    }\n    randomiseResources() {\n        let array = this.state.array\n        array.map(row => {\n            return row.map(element=>{\n                let rando = Math.random()\n                let threshold = this.props.resourceSpawnThreshold\n                if (rando < threshold)\n                    element.value = \"a\"\n                else if (rando < threshold*2)\n                    element.value = \"b\"\n                else if (rando < threshold*3)\n                    element.value = \"c\"\n                else element.value = \"_\"\n                return element\n            })\n        })\n        this.setArray(array)\n    }\n    \n    askDrone(resourceString, droneNr) {\n        let array = this.state.array\n        let checkResource = string => string===resourceString\n        let checkCost = (x1, y1, x2, y2) => Math.abs(x1 - x2) + Math.abs(y1 - y2)\n        let drone = this.state.droneArray[droneNr]\n        array.map(row => {\n            row.map( element => {\n                if(checkResource(element.value)){\n                    let cost = (drone.currentX && drone.currentY) ? \n                                    checkCost(drone.currentX,drone.currentY,element.x,element.y):\n                                    checkCost(drone.x,drone.y,element.x,element.y)\n                    if(drone[resourceString] !== undefined \n                    && cost > drone[resourceString]){console.log('do')} \n                    //do nothing ^\n                    else{\n                        console.log(cost)\n                        drone[resourceString] = cost\n                        drone.couldBeX = element.x\n                        drone.couldBeY = element.y\n                    }\n                }\n\n            })\n        })\n\n        \n    }\n    getBidsHelper(jobString, droneNr, x, y) {\n        console.log(jobString)\n        let array = this.state.array\n        let checkJob = string => string===jobString\n        let checkCost = (x1, y1, x2, y2) => Math.abs(x1 - x2) + Math.abs(y1 - y2)\n        let drone = this.state.droneArray[droneNr]\n        array.map(row => {\n            row.map( element => {\n                if(checkJob(element.name)){\n                    let cost = checkCost(x,y,element.x,element.y)\n                    console.log(element.name)\n                    drone.jobs.map(e=>{\n                        cost += e.cost\n                    })\n                    drone.jobs.push({x:element.x,y:element.y,name:element.name,cost:cost})\n                }\n\n            })\n        })\n        let droneArray = this.state.droneArray\n        droneArray[droneNr] = drone\n        console.log(droneArray)\n        console.log(droneArray[droneNr])\n        this.setState({\n            droneArray: droneArray\n        })\n        console.log(drone)\n    }\n    getBids(droneNr){\n        console.log(this.state.jobArray)\n        for(let job of this.state.jobArray){           \n            this.getBidsHelper(job.name, droneNr, job.x, job.y)\n        }\n    }\n    addJob(x,y) {\n        let arrayJobs = this.state.jobArray\n        arrayJobs.push({name: this.state.alphabet[this.state.alphabetCounter],x:x,y:y})\n        this.setState({\n            alphabetCounter:this.state.alphabetCounter+1,\n            jobArray:arrayJobs\n        })\n        let array = this.state.array\n        for (let job of arrayJobs){\n            array[job.x][job.y].value = job.name\n        }\n        this.setState({\n            array:array\n        })\n    }\n    // ECNP(ressource){\n    //     let \n\n\n\n    // }\n\n\n\n\n    render() {\n        const array = this.state.array\n        return <div>\n                    <button onClick={this.randomiseResources}>\n                        Random Resources\n\n                    </button>\n                    \n                    <button onClick={() => this.askDrone('a', 1)}>\n                        Ask Drone 1\n\n                    </button>\n                                        \n                    <button onClick={() => this.getBids(1)}>\n                        Ask Drone 1\n\n                    </button>\n                    {array.map(row => \n                                <div>{row.map(element =>\n                                    \n                                    <span onClick={() => this.addJob(element.x,element.y)}>| {element.value}</span>)\n                        }</div>)\n                }</div>\n    }\n\n}"]},"metadata":{},"sourceType":"module"}